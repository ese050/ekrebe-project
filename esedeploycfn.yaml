Description:  This template deploys an AutoScaling Group with Application Load Balancer Ref VPC,Subnet, security grp. It deploys an AutoScaling Group with Application Load Balancer. with a code deplay userdata.

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: Ese-CFn-Template

  VPC:
    Type: String
    ConstraintDescription: must be the name of an existing VPC

  PublicSubnet1:
    Type: String
    Description: Public subnet 1 ID

  PublicSubnet2:
    Type: String
    Description: Public subnet 2 ID

  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
    ConstraintDescription: must be a valid EC2 instance type.

  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: String
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  InstanceProfileARN:
    Description: Instance profile ARN
    Type: String

  WebServerSecurityGroup:
    Description: Web server security group
    Type: String

Mappings:
  RegionMap:
    us-east-1:
     AMI: ami-0c02fb55956c7d316
    us-west-2:
     AMI: ami-04a50faf2a2ec1901

Resources:
  ELBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP from 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  MyLaunchTemplate: 
    Type : AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateData: 
        ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        IamInstanceProfile:
          Arn: !Ref InstanceProfileARN
        NetworkInterfaces:
          - DeviceIndex: 0 
            AssociatePublicIpAddress: true
            Groups: [Ref: WebServerSecurityGroup]
        UserData: 
          Fn::Base64: !Sub |
            #!/bin/bash
            yum install httpd -y
            service httpd start
            curl -O https://bootstrap.pypa.io/get-pip.py
            python3 get-pip.py
            pip install git-remote-codecommit
            sudo yum install git -y
            git clone codecommit::us-east-1://viticodecommit classlab
            sudo cp -r classlab/* /var/www/html/

  ALBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref VPC

  WebServerGroup:
   Type: 'AWS::AutoScaling::AutoScalingGroup'
   Properties:
     VPCZoneIdentifier:
       - !Ref PublicSubnet1
       - !Ref PublicSubnet2

     DesiredCapacity: 2
     HealthCheckGracePeriod: 300
     HealthCheckType: ELB
     LaunchTemplate:
       LaunchTemplateId: !Ref MyLaunchTemplate
       Version: !GetAtt MyLaunchTemplate.LatestVersionNumber
     MaxSize: 3
     MinSize: 1
     TargetGroupARNs:
       - !Ref ALBTargetGroup
     Tags:
       - Key: Name
         PropagateAtLaunch: false
         Value: ASG
      
  WebServerTargetPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref WebServerGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 50.0

  ApplicationLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      SecurityGroups:
        - !Ref ELBSecurityGroup
      Subnets:
       - !Ref PublicSubnet1
       - !Ref PublicSubnet2

  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: '80'
      Protocol: HTTP
